<!DOCTYPE html PUBLIC "-//w3c//dtd html 3.2 final//ru">
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="description" content="Переводы по OpenGL, трехмерная графика, игры, мультимедия
Translations Russian OpenGL
">
<meta name="keyword" content="Программирование,игры,3D,трехмерная графика,OpenGL,NeHe">
<meta name="keyword" content="programming,C,C++,game,graphics">
<title>Урок 2. Отображение полигонов</title>
<link rel="stylesheet" href="nehe02_files/pmg.css" type="text/css">
</head>



<body bgcolor="#b2d3e1" link="#D621AD" vlink="#800080">
<script src="nehe02_files/nehe.js" language="javascript">
<!--
//-->
</script>

<center>
<div id="top">
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tbody><tr>
        <td align="center" valign="center" width="20%">
        <img src="nehe02_files/nehelogo.jpg" alt="NeHe Tutorials" align="left" height="50" hspace="0" width="125">
        </td>
        <td align="center" width="60%">
	<a href="http://pmg.org.ru/nehe/index.html" onmouseover=" return event_over(this,'NeHe Ru.')  " onmouseout=" return event_out(this) ">
        <font class="linksbig">
        Народный учебник по OpenGL</font></a><br>
        </td>
        <td align="center" valign="center" width="20%">
        <img src="nehe02_files/nehe02.jpg" alt="Урок 2. OpenGL" align="right" height="60" hspace="0" width="80">
        </td>
    </tr>
</tbody></table>
</div>

<div style="width: 1000px;" id="head">
<p class="head1">
Урок 2. Отображение полигонов
</p>
</div>

<div style="width: 1000px;" id="main" bgcolor="#ADADFF">
<p class="textnoalign" align="left">

<a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=02" target="_blank" onmouseover=" return event_over(this,this)  " onmouseout=" return event_out(this) ">
<font class="link"><b>Your First Polygon</b></font></a>
<br>
<br>
</p>

<p class="text">
В предыдущем уроке было рассмотрено создание OpenGL окна. Теперь мы изучим 
создание таких фигур как треугольники и квадраты, при помощи  GL_TRIANGLES и 
GL_QUADS.
</p>

<p class="text">
Для создания приложения мы будем использовать код предыдущего примера, только 
добавим код в функцию DrawGLScene. Все ее изменения приводятся ниже. Если вы 
планируете менять предыдущий урок, просто замените функцию DrawGLScene 
следующим кодом, или просто добавьте те строки, которые там отсутствуют.
</p> 


<p class="textpreword">GLvoid DrawGLScene(GLvoid)<br>
{<br>
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Очистка экрана<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 и буфера глубины<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glLoadIdentity();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 Сброс просмотра</p>

<p class="text">
Вызов функции gLoadIdentity() устанавливает начало системы координат в центр экрана, 
причем ось X идет слева направо, ось Y вверх и вниз, а ось Z к и от наблюдателя. Центр 
OpenGL экрана находится в точке 0, 0, 0. Координаты, расположенные слева, снизу и 
вглубь от него, имеют отрицательное значение, расположенные справа, сверху и по 
направлению к наблюдателю  – положительное.
</p>

<p class="text">
Функция glTranslate(x, y, z) перемещает оси координат на указанные значения. 
Следующая строчка кода перемещает ось X на 1.5 единиц и ось Z на 6 единиц. Следует 
заметить, что перевод осей координат осуществляется не относительно центра экрана, а от 
их текущего расположения.
</p>

<p class="textpreword">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glTranslatef(-1.5f,0.0f,-6.0f);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 Сдвинемся влево на 1.5 единицы и<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 в экран на 6.0</p>

<p class="text">
Теперь, когда мы переместились в левую часть экрана и установили более удобный вид (в 
глубину на 6 единиц), отобразим геометрическую фигуру. Функция 
glBegin(GL_TRIANGLES) означает, что мы начинаем рисовать треугольник, и далее 
следует перечисление его вершин. После указания всех вершин, производится вызов 
функции glEnd(). Обычно треугольники на большинстве видеокарт отображаются 
наиболее быстро, но если есть желание отобразить иную фигуру, вместо GL_TRIANGLE 
используется другое значение, например: для создания четырехугольника указывается 
GL_QUADS, если вершин больше чем 4, то GL_POLYGONS. 
</p>


<p class="text">
В нашем примере рисуем только один треугольник. Если есть желание изобразить еще 
один треугольник, добавьте часть кода, следующую за описанием первого треугольника. 
В это случае все шесть строк кода следует размещать между glBegin(GL_TRIANGLES) и 
glEnd(). Нет нужды выделять каждый треугольник этими командами, после обработки 
трех вершин OpenGL сам перейдет к созданию новой фигуры. Это же относится и к 
четырехугольникам. Полигоны (GL_POLYGONS) в свою очередь могут иметь любое 
количество вершин, и поэтому нет разницы, сколько описателей располагалось между 
строками glBegin(GL_POLYGONS) и glEnd().
</p>

<p class="text">
Первая строка после glBegin описывает первую вершину нашего полигона. Функция 
glVertex3f() получает в качестве параметров ее X, Y и Z координаты. Первая вершина 
треугольника смещена только от оси Y на 1, таким образом, мы расположим ее точно в 
центре и она будет самой верхней. Следующая вершина будет располагаться на оси Х 
слева от центра и на оси Y вниз от центра. Эта вершина будет расположена внизу слева. 
Третья вершина будет справа и снизу от центра. Функция glEnd() указывает OpenGL, что 
вершин больше не будет. Результатом всего этого будет залитый цветом по умолчанию 
треугольник.
</p>


<p class="textpreword">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBegin(GL_TRIANGLES);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glVertex3f(
 0.0f, 1.0f, 0.0f);&nbsp;&nbsp;// Вверх<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glVertex3f(-1.0f,-1.0f,
 0.0f);&nbsp;&nbsp;// Слева снизу<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glVertex3f(
 1.0f,-1.0f, 0.0f);&nbsp;&nbsp;// Справа снизу<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glEnd();</p>

<p class="textpreword"><br>
Теперь у нас есть треугольник, изображенный в правой части экрана. Нам нужно <br>
переместиться в левую часть, для этого снова используем функцию glTranslate(). Так как <br>
мы в прошлый раз перемещались влево на 1.5 единицы, необходимо переместиться на 3.0 <br>
единицы вправо (1.5 единицы – это будет центр, плюс еще 1.5 единицы для правого края).<br>
</p>

<p class="textpreword">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glTranslatef(3.0f,0.0f,0.0f);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 Сдвинем вправо на 3 единицы</p>

<p class="text">
Здесь мы изобразим квадрат. Так как он является четырехсторонним полигоном, мы будем 
использовать GL_QUADS. Создание квадрата напоминает создание треугольника, правда 
указывать нужно четыре вершины. Они будут идти в следующем порядке – левая вверху, 
правая вверху, правая снизу и левая снизу.
</p>


<p class="textpreword">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBegin(GL_QUADS);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glVertex3f(-1.0f,
 1.0f, 0.0f);&nbsp;&nbsp;// Слева вверху<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glVertex3f(
 1.0f, 1.0f, 0.0f);&nbsp;&nbsp;// Справа вверху<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glVertex3f(
 1.0f,-1.0f, 0.0f);&nbsp;&nbsp;// Справа внизу<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glVertex3f(-1.0f,-1.0f,
 0.0f);&nbsp;&nbsp;// Слева внизу<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glEnd();<br>
}</p>

<p class="text">
В этом примере я попытался описать как можно больше деталей, указать каждый шаг 
создания полигонов на экране с использованием OpenGL. Если у вас есть, какие либо 
замечания, вопросы или комментарии, я жду ваших писем. Если вы нашли неправильно 
описание или ошибки в коде, пожалуйста, сообщите мне об этом, мне очень хотелось бы, 
чтобы эти описания были лучше. 
</p>

<p class="textnoalign" align="right">
<font color="#0000A0"><b> © Jeff Molofee (NeHe)</b></font><br>
</p>          
<p></p>          
</div>

<div style="width: 1000px;" id="end">
<p align="center">
<a href="http://pmg.org.ru/" onmouseover=" return event_over(this,'Программирование магических игр')  " onmouseout=" return event_out(this) ">
<font class="link"><b>PMG</b></font></a>

<font class="comment">&nbsp;26 марта 2001&nbsp;(c)&nbsp;</font>

<a href="mailto:timurs@khsu.khakasnet.ru" onmouseover=" return event_over(this,'Почта переводчику')  " onmouseout=" return event_out(this) ">
<font class="link"><b>Тимур Салихов</b></font></a>
</p>
</div>

</center>

<script language="JavaScript">
<!--
form_print();
//-->
</script>



</body></html>